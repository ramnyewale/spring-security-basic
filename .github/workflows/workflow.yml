name: Deploy application to EC2 via CICD

on:
  push:
    branches:
      #- master
      - invalid-branch-to-fail-job-to-avoid-aws-cost # remove this line to make it working

jobs:
#  check-access:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      # Configure AWS credentials
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: "us-east-1"
#
#      # Verify AWS credentials
#      - name: Verify AWS credentials
#        run: aws sts get-caller-identity

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Run deployment script on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Pull the latest code (if you are using a Git clone on EC2)
            # git pull origin main
          
            # Stop the running container (if any)
            docker stop spring-boot-container || true
            docker rm spring-boot-container || true
          
            # Remove the old Docker image
            docker rmi my-spring-boot-app || true
          
            # Pull the new Docker image from GitHub Packages (optional)
            # docker pull ghcr.io/your-github-username/my-spring-boot-app:latest
          
            # Build the new Docker image
            docker build -t my-spring-boot-app .
          
            # Run the Docker container
            docker run -d --name spring-boot-container -p 8080:8080 my-spring-boot-app
          EOF
